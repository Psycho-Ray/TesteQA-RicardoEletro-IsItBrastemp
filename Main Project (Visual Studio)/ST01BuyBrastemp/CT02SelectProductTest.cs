// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using System.Globalization;

namespace ST01BuyBrastemp
{
    [TestFixture]
    public class CT02SelectProductTest {
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        private string searchText;
        private bool logAllProducts;
        private int priceMin, priceMax;

        [SetUp]
        public void SetUp() {
            driver = new FirefoxDriver();
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            searchText = "Geladeira";
            logAllProducts = true;
            priceMin = 2500;
            priceMax = 3500;
        }
        [TearDown]
        protected void TearDown() {
            driver.Quit();
        }

        //Search for the most well reviewed products
        private IWebElement quickSearch() {
            driver.FindElement(By.Id("search-desktop")).SendKeys(searchText);
            driver.FindElement(By.CssSelector("#i9-search-desktop__addon > img")).Click();
            driver.FindElement(By.CssSelector("#open-order-options-desktop > .arrow-down")).Click();
            driver.FindElement(By.LinkText("Melhor Avaliados")).Click();
            return driver.FindElement(By.CssSelector(".col-12:nth-child(1) .card-title"));
        }

        [Test]
        public void cT02SelectProduct() {
            //Opens in Desktop Mode (720p)
            driver.Navigate().GoToUrl("https://www.ricardoeletro.com.br/");
            driver.Manage().Window.Size = new System.Drawing.Size(1280, 720);

            //Searches for the most well reviewed products
            var productList = quickSearch();
            string productName = null;
            string productPrice = null;
            int i;

            //For each product within the first search results page...
            for (i = 1; i <= 24; i++) {
                //Stores product name and price
                productName = driver.FindElement(By.CssSelector(".col-12:nth-child("+i+") .card-title")).Text;
                productPrice = driver.FindElement(By.CssSelector(".col-12:nth-child("+i+") .i9-product-card__price")).Text;

                //Checks if the product is unavailable
                if (productPrice.Equals("Produto Indisponível")) {
                    if (logAllProducts) Console.WriteLine("The product is Out of Stock: " + productName);
                    continue;
                }

                //Converts the price from a Currency Formatted String to an Int
                int price = (int)decimal.Parse(productPrice.Substring(productPrice.IndexOf("R$")), NumberStyles.Currency);

                //Checks if the product is too cheap
                if (price < priceMin) {
                    if (logAllProducts) Console.WriteLine("The product is too cheap: " + productName + " for " + productPrice);
                    continue;
                }

                //Checks if the product is too expensive
                if (price > priceMax) {
                    if (logAllProducts) Console.WriteLine("The product is too expensive: " + productPrice + " for " + productName);
                    continue;
                }

                //Selects the product and store it's brand
                driver.FindElement(By.CssSelector(".col-12:nth-child("+i+") .card-header")).Click();
                WebDriverWait waitBrand = new WebDriverWait(driver, System.TimeSpan.FromSeconds(30));
                waitBrand.Until(driver => driver.FindElements(By.CssSelector(".d-sm-inline-block")).Count > 0);
                var productBrand = driver.FindElement(By.CssSelector(".d-sm-inline-block")).Text;

                //Discards it if it's not a Brastemp (It has to repeat the search)
                if (!productBrand.Equals("Brastemp")) {
                    if (logAllProducts) Console.WriteLine("The product is not a Brastemp: " + productName);
                    productList = quickSearch();
                    continue;
                }

                //Everthing seems ok, so it buys the product
                Console.WriteLine("Success: Buying Brastemp named "+ productName + " for " + productPrice);
                Assert.True(driver.FindElements(By.LinkText("ADICIONAR AO CARRINHO")).Count > 0);
                driver.FindElement(By.LinkText("ADICIONAR AO CARRINHO")).Click();
                break;
            }

            //If all products on the first page have been visited
            //Looping throught the pages will generate weird results like child toys appearing on the results
            if (i == 25) {
                Console.WriteLine("Failure: No Brastemp was found on the first result page within this price range");
                return;
            }

            //Waits for the cart page to load
            WebDriverWait wait = new WebDriverWait(driver, System.TimeSpan.FromSeconds(30));
            wait.Until(driver => driver.FindElements(By.CssSelector(".checkout-steps-title")).Count > 0);

            //Checks if the cart is empty
            try {
                var emptyCartMessage = driver.FindElement(By.CssSelector(".i9-balao > p:nth-child(1)"));
                Assert.That(emptyCartMessage.Text, Is.EqualTo("SEU CARRINHO AINDA ESTÁ VAZIO :("));
                Console.WriteLine("Failure: The product was not added to the cart");
                return;
            }
            catch (NoSuchElementException) {
                
            }

            //Stores the cart's product info
            var cartPrice = driver.FindElement(By.CssSelector(".col-12:nth-child(8)")).Text;

            //Checks if price matches. Unfortunately, the name may change, so checking it is useless
            if (productPrice.Equals(cartPrice)) Console.WriteLine("Success: The product was added to the cart");
            else Console.WriteLine("Failure: There is another product already in the cart");
        }
    }
}